spring.application.name=backend

# --- Database Configuration ---
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# --- Server Configuration ---
server.port=8080

# Stripe configuration
stripe.api.secret=${STRIPE_SECRET_KEY}
stripe.api.public-key=ppk_test_51RGzb4Q2P2OElyIoJ1UlmaWGrc31o4elsT4jPbZQce3nSIxP42eJbbXnhRTiZLOfKTTUjYw2vzF0gLUNZEz7Tm5100TCMr125L

# Stripe webhook signing secret (matches @Value in StripeController)
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# --- CORS (Allow Frontend to Communicate) ---
# Optional: We will configure it properly inside Spring Security too

# Gmail SMTP Settings
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Custom admin credentials used in SecurityConfig
admin.username=${ADMIN_USERNAME}
admin.password=${ADMIN_PASSWORD}
admin.email=${SPRING_MAIL_USERNAME}

# --- Thymeleaf Configuration ---
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.enabled=true
spring.thymeleaf.mode=HTML

jwt.secret=${JWT_SECRET_KEY}
